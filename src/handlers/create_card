from multiprocessing.connection import wait
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext,Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram import types
from cards import Send_Comment
from datetime import datetime

import admins


#from createdb import MySQL
from firebase import firebase

from create_bot import dp,bot

import buttons

PHOTOS_ID = []


class CellarImport(StatesGroup):#–∫–ª–∞—Å—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤ –§–°–ú –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
   create_tiket = State()#–ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø
   create_header = State()#–≤—Ç–æ—Ä–æ–π —ç—Ç–∞–ø
   send2trello = State()#—Ç—Ä–µ—Ç–∏–π —ç—Ç–∞–ø


# —ç—Ç–∞–ø ‚Ññ1
async def enter_header(message: types.Message, state: FSMContext):
   await message.answer("–î–∞–≤–∞–π—Ç–µ –ø—Ä–∏–¥—É–º–∞–µ–º –∫–∞–∫ –º—ã –Ω–∞–∑–æ–≤—ë–º –Ω–∞—à—É –∑–∞—è–≤–∫—É?\n–î–∞–π—Ç–µ –µ–π –Ω–µ–±–æ–ª—å—à–æ–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ:",reply_markup=buttons.cancel)#–µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –∏–º–µ–µ—Ç—Å—è
   await CellarImport.create_tiket.set()#–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞

# —ç—Ç–∞–ø ‚Ññ2
async def enter_tiket(message: types.Message, state: FSMContext):#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏ /start
   await state.update_data(header = message.text)
   if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
      await message.answer(f"–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",reply_markup=buttons.mainMenu)
      await state.finish()
   elif message.content_type == "text":
      await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ê —Å–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É:\n\n\
üìå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∫–æ–Ω—Ç–∞–∫—Ç, –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–∞–π–ª.",reply_markup=buttons.removebtn)#–µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –∏–º–µ–µ—Ç—Å—è
      await CellarImport.create_header.set()#–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
   else:
      await message.answer("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ç–µ–∫—Å—Ç–æ–º.")#–µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –∏–º–µ–µ—Ç—Å—è

# —ç—Ç–∞–ø ‚Ññ3
async def send_tiket(message: types.Message, state: FSMContext):#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö + –§–°–ú
   await state.update_data(tiket = message.text) #message.text —ç—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   if message.content_type == "text":
      await message.answer(f"–ì–æ—Ç–æ–≤–æ! –í –±–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∑–∞–π–º–µ—Ç—å—Å—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–æ–π!",reply_markup=buttons.mainMenu)

   elif message.content_type == "photo":
      await message.answer(f"–ì–æ—Ç–æ–≤–æ! –í –±–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∑–∞–π–º–µ—Ç—å—Å—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–æ–π!",reply_markup=buttons.mainMenu)
      user_photo = message.photo[-1].file_id
      cap = message.caption
      for chat in admins.adminsID:
         await bot.send_photo(chat_id=chat, photo=user_photo, caption=cap)
         message.text = f"Photo: {user_photo},{cap}"

   elif message.content_type == "video_note":
      await message.answer(f"–ì–æ—Ç–æ–≤–æ! –í –±–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∑–∞–π–º–µ—Ç—å—Å—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–æ–π!",reply_markup=buttons.mainMenu)
      user_note = message.video_note.file_id
      for chat in admins.adminsID:
         await bot.send_video_note(chat,user_note)
      message.text = f"VideoNote: {user_note}"

   elif message.content_type == "document":
      await message.answer(f"–ì–æ—Ç–æ–≤–æ! –í –±–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∑–∞–π–º–µ—Ç—å—Å—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–æ–π!",reply_markup=buttons.mainMenu)
      user_file = message.document.file_id
      cap = message.caption
      for chat in admins.adminsID:
         await bot.send_document(chat_id=chat,document=user_file,caption=cap)
      message.text = f"Doc: {user_file},{cap}"

   elif message.content_type == "video":
      await message.answer(f"–ì–æ—Ç–æ–≤–æ! –í –±–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∑–∞–π–º–µ—Ç—å—Å—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–æ–π!",reply_markup=buttons.mainMenu)
      user_file = message.video.file_id
      cap = message.caption
      await bot.send_video(chat_id=chat,video=user_file,caption=cap)
      message.text = f"Video: {user_file},{cap}"

   elif message.content_type == "voice":
      await message.answer(f"–ì–æ—Ç–æ–≤–æ! –í –±–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∑–∞–π–º–µ—Ç—å—Å—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–æ–π!",reply_markup=buttons.mainMenu)
      user_file = message.voice.file_id
      for chat in admins.adminsID:
         await bot.send_voice(chat_id=chat,voice=user_file)
      message.text = f"Voice: {user_file}"

   elif message.content_type == "contact":
      await message.answer(f"–ì–æ—Ç–æ–≤–æ! –í –±–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∑–∞–π–º–µ—Ç—å—Å—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–æ–π!",reply_markup=buttons.mainMenu)
      user_file = message.contact.phone_number
      user_phone_name = message.contact.first_name
      for chat in admins.adminsID:
         await bot.send_contact(chat_id=chat,phone_number=user_file,first_name=user_phone_name)
      message.text = f"Phone contact: {user_phone_name}:{user_file}"

   elif message.content_type == "location":
      await message.answer(f"–ì–æ—Ç–æ–≤–æ! –í –±–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∑–∞–π–º–µ—Ç—å—Å—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–æ–π!",reply_markup=buttons.mainMenu)
      user_pos1 = message.location.latitude
      user_pos2 = message.location.longitude
      for chat in admins.adminsID:
         await bot.send_location(chat_id=chat,latitude=user_pos1, longitude=user_pos2)
      message.text = f"Location: X:{user_pos1},Y:{user_pos2}"

   else:
      await message.answer(f"–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :(",reply_markup=buttons.mainMenu)

   phone_number = firebase.getUserPhone(message.from_user.id)
   phone_link = "[+"+phone_number+"](tel://+"+(phone_number)+")"
   username = firebase.getUserName(message.from_user.id)
   org_name = firebase.getOrgName(message.from_user.id)

   data = await state.get_data()
   header_tiket = data['header']
   tiket_id = firebase.getTiketId()
   date = datetime.now().strftime("%d.%m.%Y %H:%M")

   trello_id = Send_Comment.create(header_tiket,message.text,username,message.from_user.username,phone_link,tiket_id)
   firebase.createTiket(message.from_user.id,username,message.from_user.username,phone_number,header_tiket,trello_id,tiket_id,date)

   mention = "["+username+"](tg://user?id="+str(message.from_user.id)+")"

   for chat in admins.adminsID:
      await bot.send_message(chat_id=chat,
         text= f"üöÄ *–ó–∞—è–≤–∫–∞ #{tiket_id}*\n\n{mention} –∏–∑ *{org_name}* —Å–æ–∑–¥–∞–ª –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.\n\n*–¢–µ–º–∞ –∑–∞—è–≤–∫–∏:* {header_tiket}" ,
         parse_mode="Markdown",reply_markup=buttons.inline_tiket)
   await state.finish()

def handler_client(db : Dispatcher):
    dp.register_message_handler(enter_header,Text(startswith="‚úÖ –°–æ–∑–¥–∞—Ç—å "))
    dp.register_message_handler(enter_header,Text(startswith="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
    dp.register_message_handler(enter_tiket,content_types=['text', 'sticker', 'video', 'photo', 'audio', 'voice','animation','video_note','document','location','contact'],state=CellarImport.create_tiket)
    dp.register_message_handler(send_tiket,content_types=['text', 'sticker', 'video', 'photo', 'audio', 'voice','animation','video_note','document','location','contact'],state=CellarImport.create_header)